__version__ = (2, 0, 1)

# module by:
# ‚ñà‚ñÄ‚ÄÉ‚ñà‚ñÑ‚ñÄ‚ÄÉ‚ñà‚ÄÉ‚ñà‚ñë‚ñë‚ÄÉ‚ñà‚ñë‚ñë‚ÄÉ‚ñÄ‚ñà
# ‚ñÑ‚ñà‚ÄÉ‚ñà‚ñë‚ñà‚ÄÉ‚ñà‚ÄÉ‚ñà‚ñÑ‚ñÑ‚ÄÉ‚ñà‚ñÑ‚ñÑ‚ÄÉ‚ñà‚ñÑ

# ‚ñà‚ñÄ‚ñÑ‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñÄ‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ñë‚ñà‚ñë‚ñà
# ‚ñà‚ñë‚ñÄ‚ñë‚ñà‚ÄÉ‚ñà‚ñà‚ñÑ‚ÄÉ‚ñà‚ñÑ‚ñà‚ÄÉ‚ñÄ‚ñÑ‚ñÄ‚ñÑ‚ñÄ
#   you can edit this module
#            2022
# üîí Licensed under the GNU GPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html

# meta developer: @smeowcodes

import logging

from .. import loader, utils, main

from ..inline.types import InlineCall
from ..inline.types import InlineQuery
from telethon.tl.types import Message

import random

import datetime as d
import pytz

import calendar as c

from pytz import timezone

logger = logging.getLogger(__name__)

class MyTimeMod(loader.Module):
    """–ß—é—á—é—Ç –∫—Ä—É—Ç–æ–π –º–æ–¥—É–ª—å"""
    
    strings = {
        "name": "MyTime",
        "time": "üì° Accuracy time",
        "cancel_btn": "üö´ Close",
        "back_btn": "‚è™ Back",
        "datendtime": "üìÜ DateTime",
        "timezone": "üåû All timezones",
        "datecalc": "üßë‚Äçüíª DateCalculator",
        "date": "üìÜ Date",
        "open_manager": "üìì Open manager",
        "expected_date": "üòÄ Expected date",
        "calendar": "üóì Calendar",
        "ss": "{} days, {} hours, {} minutes.",
        "wyc": "What you choose?üòÖ",
        "days": "Mon, Tue, Wed, Thu, Fri, Sat, Sun",
        "month": "January, February, March, April, May, June, July, August, September, October, November, December",
    }
    strings_ru = {
        "time": "üì° –¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è",
        "cancel_btn": "üö´ –ó–∞–∫—Ä—ã—Ç—å",
        "back_btn": "‚è™ –ù–∞–∑–∞–¥",
        "datendtime": "üìÜ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è",
        "timezone": "üåû –í—Å–µ —Ç–∞–π–º–∑–æ–Ω—ã",
        "datecalc": "üßë‚Äçüíª –°—á—ë—Ç—á–∏–∫ –¥–∞—Ç",
        "date": "üìÜ –î–∞—Ç–∞",
        "open_manager": "üìì –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä",
        "expected_date": "üòÄ –û–∂–∏–¥–∞–µ–º–∞—è –¥–∞—Ç–∞",
        "calendar": "üóì –ö–∞–ª–µ–Ω–¥–∞—Ä—å",
        "ss": "{} –¥–Ω–µ–π, {} —á–∞—Å–æ–≤, {} –º–∏–Ω—É—Ç.",
        "wyc": "–ß—Ç–æ –≤—ã–±–µ—Ä–µ—à—å?üòÖ",
        "days": "–ü–Ω , –í—Ç , –°—Ä , –ß—Ç , –ü—Ç , –°–± , –í—Å ",
        "month": "–Ø–Ω–≤–∞—Ä—å, –§–µ–≤—Ä–∞–ª—å, –ú–∞—Ä—Ç, –ê–ø—Ä–µ–ª—å, –ú–∞–π, –ò—é–Ω—å, –ò—é–ª—å, –ê–≤–≥—É—Å—Ç, –°–µ–Ω—Ç—è–±—Ä—å, –û–∫—Ç—è–±—Ä—å, –ù–æ—è–±—Ä—å, –î–µ–∫–∞–±—Ä—å",
    }
    strings_ua = {
        "time": "üì° –¢–æ—á–Ω–∏–π —á–∞—Å",
        "cancel_btn": "üö´ –ó–∞—á–∏–Ω–∏—Ç–∏",
        "back_btn": "‚è™ –ù–∞–∑–∞–¥",
        "datendtime": "üìÜ –î–∞—Ç–∞ —ñ —á–∞—Å",
        "timezone": "üåû –í—Å—ñ —Ç–∞–π–º–∑–æ–Ω–∏",
        "datecalc": "üßë‚Äçüíª –õ—ñ—á—ñ–ª—å–Ω–∏–∫ –¥–∞—Ç",
        "date": "üìÜ –î–∞—Ç–∞",
        "open_manager": "üìì –í—ñ–¥–∫—Ä–∏—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä",
        "expected_date": "üòÄ –û—á—ñ–∫—É–≤–∞–Ω–∞ –¥–∞—Ç–∞",
        "calendar": "üóì –ö–∞–ª–µ–Ω–¥–∞—Ä",
        "ss": "{} –¥–Ω—ñ–≤, {} –≥–æ–¥–∏–Ω, {} —Ö–≤–∏–ª–∏–Ω",
        "wyc": "–©–æ –≤–∏–±–µ—Ä–µ—à?üòÖ",
        "days": "–ü–Ω , –í—Ç , –°—Ä , –ß—Ç , –ü—Ç , –°–± , –ù–¥ ",
        "month": "–°—ñ—á–µ–Ω—å, –õ—é—Ç–∏–π, –ë–µ—Ä–µ–∑–µ–Ω—å, –ö–≤—ñ—Ç–µ–Ω—å, –¢—Ä–∞–≤–µ–Ω—å, –ß–µ—Ä–≤–µ–Ω—å, –õ–∏–ø–µ–Ω—å, –°–µ—Ä–ø–µ–Ω—å, –í–µ—Ä–µ—Å–µ–Ω—å, –ñ–æ–≤—Ç–µ–Ω—å, –õ–∏—Å—Ç–æ–ø–∞–¥",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "expected_date",
                "2023, 1, 1",
                lambda: "–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –ß–ï–†–ï–ó –∑–∞–ø—è—Ç—É—é (year, month, day)",
            ),
            loader.ConfigValue(
                "datetext",
                "üéÑ –î–æ –Ω–æ–≤–æ–≥–æ –≥–æ–¥–∞ –æ—Å—Ç–∞–ª–æ—Å—å",
                lambda: "–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –¥–ª—è –≤–∞—à–µ–π –¥–∞—Ç—ã (–î–æ –º–æ–µ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –æ—Å—Ç–∞–ª–æ—Å—å, –∏ —Ç–¥)",
            ),
            loader.ConfigValue(
            	"correct_time",
            	"Europe/Moscow",
            	lambda: "To check all timezones use:\n.e import pytz\npytz.all_timezones",
            ),
        )

    @staticmethod
    async def cancel(call: InlineCall):
        await call.delete()
    
    @loader.unrestricted
    async def mytimecmd(self, message: Message):
        "open a manager"
        list = ["–º–æ–¥—É–ª—å –æ—Ç —Å–∫–∏–ª–ª–∑–∞", "–≤ —Ö–∏–∫–∫–µ —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–æ—á–∫–∏ –∏ —Å–º–∞–π–ª–∏–∫–∏...", "—á–µ –∑–∞ —Ö—Ä–µ–Ω—å?", "—Ö–æ—á—É —Ñ—Ç–≥", "–≤–∞—à–∞ —Å–µ—Å—Å–∏—è —Å–ø–∏–∂–∂–µ–Ω–∞ —Å–∫–∏–ª–∑–æ–º"]
        hz = random.choice(list)
        args = utils.get_args_raw(message)
        if not args:
            await self.inline.form(
                message=message,
                
                text=f'<b>{hz}</b>',
                
                reply_markup=[
                    [
                        {
                            "text": self.strings("open_manager"),
                            "callback": self.back_btn,
                        },
                    ],
                ],
            )
        else:
        	await utils.answer(message, "—ç–º —á–æ —Ö–æ—á–µ—â")
            
    async def time_call(self, call: InlineCall) -> None:
    	
        tz = timezone(self.config["correct_time"])
        timenow = datetime.datetime.now(tz)
        time = timenow.strftime("%H:%M:%S")
        date = timenow.strftime("%d.%m.%Y")
        
        await call.edit(
        	
            text=f"\n<b>{self.strings('date')}: {date}\n\n{self.strings('time')}: {time}</b>",
            
            reply_markup=[
                [
                    {
                        "text": self.strings("back_btn"),
                        "callback": self.back_btn,
                    },
                    {
                        "text": self.strings("cancel_btn"),
                        "callback": self.cancel
                    },
                ],
            ],
        )

    async def expectedtime_call(self, call: InlineCall):
        stroka = str(self.config["expected_date"])
        tz = timezone(self.config["correct_time"])
        timenow = datetime.datetime.now(tz)
        n = datetime.datetime(*self.config["expected_date"], tzinfo=tz)
        d = n - timenow
        mm = divmod(d.seconds, 60)[0]
        hh, mm = divmod(mm, 60)
        await call.edit(
        	
        	text=f"<b><u>{self.strings('datecalc')}</u>\n\n{self.config['datetext']}:</b> <code>{self.strings('ss').format(d.days, hh, mm)}</code>",
        	
        	reply_markup=[
        		[
        			{
        				"text": self.strings("back_btn"),
        				"callback": self.back_btn,
        			},
        			{
        				"text": self.strings("cancel_btn"),
        				"callback": self.cancel,
        			},
        		],
        	],
        )
    def _get_mark(self):
        return (
            {"text": "–±–æ–ª—å—à–µ –º–æ–¥—É–ª–µ–π –∑–¥–µ—Å—å", "url": "https://t.me/smeowcodes"}
        )
    async def calendar_call(self, call: InlineCall):
        mesaca = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
        
        da = d.datetime.now()
        mo = da.strftime("%m")
        mont = int(mo.lstrip("0"))
        year = int(da.strftime("%Y"))
        list_month = self.strings("month").split(", ")
        name_month = c.month_name[int(mo)]
        index = mesaca.index(name_month)
        namemonth = list_month[index]
            
        b = c.monthcalendar(year, mont)
        
        days = self.strings("days").split(", ")
        
        form = " ".join(days)+"\n"+"\n".join("  ".join(' ‚Ä¢' if i == 0 else str(i) if len(str(i)) == 2 else ' '+str(i) for i in x) for x in b)
        await call.edit(
            text=f"<b>üóì {namemonth} {year}</b>\n<code>{form}</code>",
            reply_markup=[
                [
                    {
                        "text": self.strings("back_btn"),
                        "callback": self.back_btn,
                    },
                    {
                        "text": self.strings("cancel_btn"),
                        "callback": self.cancel,
                    },
                ],
            ],
        )
    async def timezonescmd(self, message: Message):
    	await self.inline.form(
    		message=message,
    		text="Timezones",
    		reply_markup=self._get_mark(),
    		**(
                {"photo": "https://0x0.st/oBvb.jpg"}
            ),
    	)
    async def back_btn(self, call: InlineCall):
        
        await call.edit(
            text=f"<b>{self.strings('wyc')}</b>",
            reply_markup=[
                [
                    {
                        "text": self.strings("datendtime"),
                        "callback": self.time_call,
                    },
                    {
                        "text": self.strings("datecalc"),
                        "callback": self.expectedtime_call,
                    },
                ],
                [{"text": self.strings("calendar"), "callback": self.calendar_call}],
                [{"text": self.strings("cancel_btn"), "callback": self.cancel}],
            ],
        )