__version__ = (0, 0, 1)

# module by:
# ‚ñà‚ñÄ‚ÄÉ‚ñà‚ñÑ‚ñÄ‚ÄÉ‚ñà‚ÄÉ‚ñà‚ñë‚ñë‚ÄÉ‚ñà‚ñë‚ñë‚ÄÉ‚ñÄ‚ñà
# ‚ñÑ‚ñà‚ÄÉ‚ñà‚ñë‚ñà‚ÄÉ‚ñà‚ÄÉ‚ñà‚ñÑ‚ñÑ‚ÄÉ‚ñà‚ñÑ‚ñÑ‚ÄÉ‚ñà‚ñÑ  
#        /\_/\
#       ( o.o )
#        > ^ <
# ‚ñà‚ñÄ‚ñÑ‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñÄ‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ñë‚ñà‚ñë‚ñà
# ‚ñà‚ñë‚ñÄ‚ñë‚ñà‚ÄÉ‚ñà‚ñà‚ñÑ‚ÄÉ‚ñà‚ñÑ‚ñà‚ÄÉ‚ñÄ‚ñÑ‚ñÄ‚ñÑ‚ñÄ
#   you can edit this module
#            2022
# üîí Licensed under the GNU GPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html
# meta developer: @smeowcodes
# yuki pr
from .. import loader, utils
import random as r

from ..inline.types import InlineCall
from telethon.tl.types import Message

class YukiMod(loader.Module):
    strings = {
        "name": "YukiPr",
    }

    async def client_ready(self, client, db):
        self.db = db
        self.client = client

    async def yukicmd(self, message: Message):
        "—É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —é–∫–∏"
        yuki = (
            "<b>{} yuki</b>\n"
            "üèã<em> –≤–µ—Å {} –∫–≥\n\n"
            "üçå –ø–æ–¥—Ä–æ—á–∏–ª {} —Ä–∞–∑\n"
            "ü¶£ –∑–∞—Å–∫–∞–º–∏–ª—Å—è {} —Ä–∞–∑\n"
            "üõÅ –ø—Ä–∏–Ω—è–ª –≤–∞–Ω–Ω—É {} —Ä–∞–∑\n"
            "üö∂ –Ω–∞–≥—É–ª—è–ª {} –∫–º\n\n"
            "üçï —Å—ä–µ–ª {} –∫–≥ –ø–∏—Ü—Ü–∏\n"
            "üçº –≤—ã–ø–∏–ª {} –ª–∏—Ç—Ä–æ–≤ –º–æ–ª–æ—á–∫–∞</em>"
        )
        droch = self.db.get("yuki", "droch", "")
        if droch == "":
            droch = 0
        scam = self.db.get("yuki", "scam", "")
        if scam == "":
            scam = 0
        shower = self.db.get("yuki", "shower", "")
        if shower == "":
            shower = 0
        walk = self.db.get("yuki", "walk", "")
        if walk == "":
            walk = 0
        eat = self.db.get("yuki", "eat", "")
        if eat == "":
            eat = 0
        water = self.db.get("yuki", "water", "")
        if water == "":
            water = 0
        ves = self.db.get("yuki", "ves", "")
        if ves == "":
            ves = 15
        if int(ves) >= 50 and int(ves) <= 75:
            photo = "https://i.imgur.com/sL8ZfVa.jpeg"
        if int(ves) >= 30 and int(ves) <= 35:
            photo = "https://i.imgur.com/hNk7Oqc.jpeg"
        if int(ves) >= 35 and int(ves) <= 50:
            photo = "https://i.imgur.com/dltH1Rz.jpeg"
        if int(ves) <= 30:
            photo = "https://i.imgur.com/NivjXG1.jpeg"

        stat = "üë¶ –º–∏–ª–∞—à–∫–∞"

        await self.inline.form(
            message=message,
            text=yuki.format(stat, ves, droch, scam, shower, walk, eat, water),
            reply_markup=[[{"text": "–ø—Ä —é–∫–∏", "url": "pornhub.com"}]],
            **(
                {
                    "photo": photo
                }
            ),
        )

    async def groomingcmd(self, message: Message):
        "–ø–æ—É—Ö–∞–∂–∏–≤–∞—Ç—å –∑–∞ —é–∫–∏"
        await self.inline.form(
            message=message,
            text=f"<b>–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å —Å —é–∫–∏?</b>",
            reply_markup=[
                [
                    {   
                        "text": "üòá —É—Ö–∞–∂–∏–≤–∞—Ç—å", "callback": self.grooming
                    },
                ],
            ],
        )
        
    async def droch(self, call: InlineCall):
        yuka = self.db.get("yuki", "droch", "")
        if yuka == "":
            self.db.set("yuki", "droch", 1)
        if int(yuka) >= 1:
            s = int(yuka) + 1
            self.db.set("yuki", "droch", s)
        await call.edit(
            text=f'<b>üí™ –ø–∏—Å—å–∫–∞ —é–∫–∏ –ø–æ–¥—Ä–æ—á–µ–Ω–∞</b>',
            reply_markup=[
                [
                    {
                        "text": "üîÑ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", "callback": self.grooming
                    }
                ],
            ],
        )
    
    async def scam(self, call: InlineCall):
        scam = self.db.get("yuki", "scam", "")
        if scam == "":
            scam = 0
        s = r.randint(1, 100)
        
        if s == 5 or s == 15 or s == 25 or s == 50 or s == 75:
            x = int(scam) + 1
            self.db.set("yuki", "scam", x)
            await call.edit(
                text=f"<b>ü¶ß —é–∫–∏ –∑–∞—Å–∫–∞–º–ª–µ–Ω –∫–∞–∫ –Ω—É–±—è—Ä–∞</b>",
                reply_markup=[
                    [
                        {
                            "text": "üîÑ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", "callback": self.grooming
                        },
                    ],
                ],
            )
            
        else:
            await call.edit(text="<b>ü§ó —Ç—ã –Ω–µ —Å–º–æ–≥ —Å–∫–∞–º–Ω—É—Ç—å —é–∫–∏</b>")
            
    async def walk(self, call: InlineCall):
        walk = self.db.get("yuki", "walk", "")
        if walk == "":
            self.db.set("yuki", "walk", 0)
        pr = int(self.db.get("yuki", "walk", "")) + 1
        self.db.set("yuki", "walk", pr)
        await call.edit(
            text=f"<b>üë¨ —Ç—ã –≤—ã–≥—É–ª—è–ª —é–∫–∏\n</b>",
            reply_markup=[
                [
                    {
                        "text": "üîÑ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", "callback": self.grooming
                    },
                ],
            ],
        )
    async def shower(self, call: InlineCall):
        shower = self.db.get("yuki", "shower", "")
        if shower == "":
            self.db.set("yuki", "shower", 0)
        pr = int(self.db.get("yuki", "shower", "")) + 1
        self.db.set("yuki", "shower", pr)
        await call.edit(
            text="<b>üßº —Ç—ã –∏—Å–∫—É–ø–∞–ª —é–∫–∏ –∏ –∏—Å–∫—É–ø–∏–ª –≤—Å–µ —Å–≤–æ–∏ –≥—Ä–µ—Ö–∏</b>",
            reply_markup=[
                [
                    {
                        "text": "üîÑ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", "callback": self.grooming
                    },
                ],
            ],
        )
    async def eat(self, call: InlineCall):
        eat = self.db.get("yuki", "eat", "")
        ves = self.db.get("yuki", "ves", "")

        if eat == "":
            self.db.set("yuki", "eat", 0)
        d = r.randint(1, 6)
        if ves == "":
            self.db.set("yuki", "ves", 15)
        v = self.db.get("yuki", "ves", "")
        if d == 4:
            f = int(v) + 1
            self.db.set("yuki", "ves", f)
            f_text = "<b>üçî –≤—ã –ø–æ–∫–æ—Ä–º–∏–ª–∏ —é–∫–∏, –æ–Ω –ø–æ–ø—Ä–∞–≤–∏–ª—Å—è –Ω–∞ 1 –∫–≥</b>"
        else:
            f_text = "<b>üçî –≤—ã –ø–æ–∫–æ—Ä–º–∏–ª–∏ —é–∫–∏</b>"
        d = int(eat) + 1
        self.db.set("yuki", "eat", d)

        await call.edit(
            text=f_text,
            reply_markup=[
                [
                    {
                        "text": "üîÑ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", "callback": self.grooming
                    },
                ],
            ],
        )

    async def water(self, call: InlineCall):
        water = self.db.get("yuki", "water", "")
        if water == "":
            self.db.set("yuki", "water", 0)
        pr = int(self.db.get("yuki", "water", "")) + 1
        self.db.set("yuki", "water", pr)
        await call.edit(
            text="<b>ü•õ —Ç—ã –Ω–∞–ø–æ–∏–ª —é–∫–∏, —Ç–µ–ø–µ—Ä—å –æ–Ω –Ω–µ —Ö–æ—á–µ—Ç –ø–∏—Ç—å</b>",
            reply_markup=[
                [
                    {
                        "text": "üîÑ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", "callback": self.grooming
                    },
                ],
            ],
        )
    async def grooming(self, call: InlineCall):
        "–ø–æ—É—Ö–∞–∂–∏–≤–∞—Ç—å –∑–∞ —é–∫–∏"
        await call.edit(
            text=f"<b>–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å —Å —é–∫–∏?</b>",
            reply_markup=[
                [
                    {   
                        "text": "üëº –ø–æ–¥—Ä–æ—á–∏—Ç—å", "callback": self.droch
                    },
                    {
                        "text": "ü¶£ –∑–∞—Å–∫–∞–º–∏—Ç—å", "callback": self.scam
                    },
                ],
                [
                    {
                        "text": "üßç‚Äç‚ôÇÔ∏è –≤—ã–≥—É–ª—è—Ç—å", "callback": self.walk
                    },
                    {
                        "text": "üöø –ø–æ–º—ã—Ç—å", "callback": self.shower
                    },
                ],
                [
                    {
                        "text": "üåÆ –ø–æ–∫–æ—Ä–º–∏—Ç—å", "callback": self.eat
                    },
                    {
                        "text": "üçº –¥–∞—Ç—å –≤–æ–¥—ã", "callback": self.water
                    }
                ],
            ],
        )
